<?php

/**
 * BaseMariage_acteur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $mariage_id
 * @property integer $mariageNumeroActe
 * @property string $nom
 * @property string $prenom
 * @property enum $typeActeur
 * @property date $dateNaissance
 * @property string $lieuNaissance
 * @property string $domicile
 * @property string $residence
 * @property string $profession
 * @property enum $etatAnterieurMariage
 * @property string $nomPrenomPrecConjoint
 * @property Mariage $Mariage
 * 
 * @method integer        getMariageId()             Returns the current record's "mariage_id" value
 * @method integer        getMariageNumeroActe()     Returns the current record's "mariageNumeroActe" value
 * @method string         getNom()                   Returns the current record's "nom" value
 * @method string         getPrenom()                Returns the current record's "prenom" value
 * @method enum           getTypeActeur()            Returns the current record's "typeActeur" value
 * @method date           getDateNaissance()         Returns the current record's "dateNaissance" value
 * @method string         getLieuNaissance()         Returns the current record's "lieuNaissance" value
 * @method string         getDomicile()              Returns the current record's "domicile" value
 * @method string         getResidence()             Returns the current record's "residence" value
 * @method string         getProfession()            Returns the current record's "profession" value
 * @method enum           getEtatAnterieurMariage()  Returns the current record's "etatAnterieurMariage" value
 * @method string         getNomPrenomPrecConjoint() Returns the current record's "nomPrenomPrecConjoint" value
 * @method Mariage        getMariage()               Returns the current record's "Mariage" value
 * @method Mariage_acteur setMariageId()             Sets the current record's "mariage_id" value
 * @method Mariage_acteur setMariageNumeroActe()     Sets the current record's "mariageNumeroActe" value
 * @method Mariage_acteur setNom()                   Sets the current record's "nom" value
 * @method Mariage_acteur setPrenom()                Sets the current record's "prenom" value
 * @method Mariage_acteur setTypeActeur()            Sets the current record's "typeActeur" value
 * @method Mariage_acteur setDateNaissance()         Sets the current record's "dateNaissance" value
 * @method Mariage_acteur setLieuNaissance()         Sets the current record's "lieuNaissance" value
 * @method Mariage_acteur setDomicile()              Sets the current record's "domicile" value
 * @method Mariage_acteur setResidence()             Sets the current record's "residence" value
 * @method Mariage_acteur setProfession()            Sets the current record's "profession" value
 * @method Mariage_acteur setEtatAnterieurMariage()  Sets the current record's "etatAnterieurMariage" value
 * @method Mariage_acteur setNomPrenomPrecConjoint() Sets the current record's "nomPrenomPrecConjoint" value
 * @method Mariage_acteur setMariage()               Sets the current record's "Mariage" value
 * 
 * @package    etatCivil
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseMariage_acteur extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mariage_acteur');
        $this->hasColumn('mariage_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('mariageNumeroActe', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('nom', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 45,
             ));
        $this->hasColumn('prenom', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 45,
             ));
        $this->hasColumn('typeActeur', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'époux',
              1 => 'épouse',
             ),
             'default' => 'époux',
             'notnull' => true,
             'charset' => 'utf8',
             ));
        $this->hasColumn('dateNaissance', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('lieuNaissance', 'string', 4000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 4000,
             ));
        $this->hasColumn('domicile', 'string', 4000, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 4000,
             ));
        $this->hasColumn('residence', 'string', 4000, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 4000,
             ));
        $this->hasColumn('profession', 'string', 70, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 70,
             ));
        $this->hasColumn('etatAnterieurMariage', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'célibataire',
              1 => 'veuf(ve)',
              2 => 'divorcé(e)',
             ),
             'default' => 'célibataire',
             'notnull' => true,
             'charset' => 'utf8',
             ));
        $this->hasColumn('nomPrenomPrecConjoint', 'string', 90, array(
             'type' => 'string',
             'charset' => 'utf8',
             'length' => 90,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Mariage', array(
             'local' => 'mariage_id',
             'foreign' => 'id'));
    }
}