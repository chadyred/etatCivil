<?php

/**
 * BaseMariage_contact
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $mariage_id
 * @property integer $mariageNumeroActe
 * @property string $nom
 * @property string $prenom
 * @property enum $typeContact
 * @property integer $age
 * @property string $domicile
 * @property string $profession
 * @property Mariage $Mariage
 * 
 * @method integer         getMariageId()         Returns the current record's "mariage_id" value
 * @method integer         getMariageNumeroActe() Returns the current record's "mariageNumeroActe" value
 * @method string          getNom()               Returns the current record's "nom" value
 * @method string          getPrenom()            Returns the current record's "prenom" value
 * @method enum            getTypeContact()       Returns the current record's "typeContact" value
 * @method integer         getAge()               Returns the current record's "age" value
 * @method string          getDomicile()          Returns the current record's "domicile" value
 * @method string          getProfession()        Returns the current record's "profession" value
 * @method Mariage         getMariage()           Returns the current record's "Mariage" value
 * @method Mariage_contact setMariageId()         Sets the current record's "mariage_id" value
 * @method Mariage_contact setMariageNumeroActe() Sets the current record's "mariageNumeroActe" value
 * @method Mariage_contact setNom()               Sets the current record's "nom" value
 * @method Mariage_contact setPrenom()            Sets the current record's "prenom" value
 * @method Mariage_contact setTypeContact()       Sets the current record's "typeContact" value
 * @method Mariage_contact setAge()               Sets the current record's "age" value
 * @method Mariage_contact setDomicile()          Sets the current record's "domicile" value
 * @method Mariage_contact setProfession()        Sets the current record's "profession" value
 * @method Mariage_contact setMariage()           Sets the current record's "Mariage" value
 * 
 * @package    etatCivil
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseMariage_contact extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mariage_contact');
        $this->hasColumn('mariage_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('mariageNumeroActe', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('nom', 'string', 45, array(
             'type' => 'string',
             'primary' => true,
             'charset' => 'utf8',
             'length' => 45,
             ));
        $this->hasColumn('prenom', 'string', 45, array(
             'type' => 'string',
             'primary' => true,
             'charset' => 'utf8',
             'length' => 45,
             ));
        $this->hasColumn('typeContact', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'tÃ©moin',
              1 => 'pÃ¨re',
              2 => 'mÃ¨re',
             ),
             'default' => 'tÃ©moin',
             'notnull' => true,
             'charset' => 'utf8',
             ));
        $this->hasColumn('age', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('domicile', 'string', 4000, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 4000,
             ));
        $this->hasColumn('profession', 'string', 70, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 70,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Mariage', array(
             'local' => 'mariage_id',
             'foreign' => 'id'));
    }
}