<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MariageContact', 'doctrine');

/**
 * BaseMariageContact
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $mariage_id
 * @property string $nom
 * @property string $prenom
 * @property string $sexe
 * @property string $typecontact
 * @property string $enrelationa
 * @property string $info
 * @property integer $age
 * @property string $domicile
 * @property string $profession
 * @property Mariage $Mariage
 * 
 * @method integer        getId()          Returns the current record's "id" value
 * @method integer        getMariageId()   Returns the current record's "mariage_id" value
 * @method string         getNom()         Returns the current record's "nom" value
 * @method string         getPrenom()      Returns the current record's "prenom" value
 * @method string         getSexe()        Returns the current record's "sexe" value
 * @method string         getTypecontact() Returns the current record's "typecontact" value
 * @method string         getEnrelationa() Returns the current record's "enrelationa" value
 * @method string         getInfo()        Returns the current record's "info" value
 * @method integer        getAge()         Returns the current record's "age" value
 * @method string         getDomicile()    Returns the current record's "domicile" value
 * @method string         getProfession()  Returns the current record's "profession" value
 * @method Mariage        getMariage()     Returns the current record's "Mariage" value
 * @method MariageContact setId()          Sets the current record's "id" value
 * @method MariageContact setMariageId()   Sets the current record's "mariage_id" value
 * @method MariageContact setNom()         Sets the current record's "nom" value
 * @method MariageContact setPrenom()      Sets the current record's "prenom" value
 * @method MariageContact setSexe()        Sets the current record's "sexe" value
 * @method MariageContact setTypecontact() Sets the current record's "typecontact" value
 * @method MariageContact setEnrelationa() Sets the current record's "enrelationa" value
 * @method MariageContact setInfo()        Sets the current record's "info" value
 * @method MariageContact setAge()         Sets the current record's "age" value
 * @method MariageContact setDomicile()    Sets the current record's "domicile" value
 * @method MariageContact setProfession()  Sets the current record's "profession" value
 * @method MariageContact setMariage()     Sets the current record's "Mariage" value
 * 
 * @package    etatcivil
 * @subpackage model
 * @author     Boyer Jimmy
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMariageContact extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mariage_contact');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('mariage_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('nom', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('prenom', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('sexe', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'masculin',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('typecontact', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'tÃ©moin',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('enrelationa', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'Ã©poux',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('info', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => ', notnull: false',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('age', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('domicile', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('profession', 'string', 70, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 70,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Mariage', array(
             'local' => 'mariage_id',
             'foreign' => 'id'));
    }
}