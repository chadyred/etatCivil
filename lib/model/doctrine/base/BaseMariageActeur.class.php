<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MariageActeur', 'doctrine');

/**
 * BaseMariageActeur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $mariage_id
 * @property string $nom
 * @property string $prenom
 * @property string $sexe
 * @property string $typeacteur
 * @property date $datenaissance
 * @property string $lieunaissance
 * @property string $domicile
 * @property string $residence
 * @property string $profession
 * @property string $etatanterieurmariage
 * @property string $nomprenomprecconjoint
 * @property string $nomapresmariage
 * @property Mariage $Mariage
 * 
 * @method integer       getId()                    Returns the current record's "id" value
 * @method integer       getMariageId()             Returns the current record's "mariage_id" value
 * @method string        getNom()                   Returns the current record's "nom" value
 * @method string        getPrenom()                Returns the current record's "prenom" value
 * @method string        getSexe()                  Returns the current record's "sexe" value
 * @method string        getTypeacteur()            Returns the current record's "typeacteur" value
 * @method date          getDatenaissance()         Returns the current record's "datenaissance" value
 * @method string        getLieunaissance()         Returns the current record's "lieunaissance" value
 * @method string        getDomicile()              Returns the current record's "domicile" value
 * @method string        getResidence()             Returns the current record's "residence" value
 * @method string        getProfession()            Returns the current record's "profession" value
 * @method string        getEtatanterieurmariage()  Returns the current record's "etatanterieurmariage" value
 * @method string        getNomprenomprecconjoint() Returns the current record's "nomprenomprecconjoint" value
 * @method string        getNomapresmariage()       Returns the current record's "nomapresmariage" value
 * @method Mariage       getMariage()               Returns the current record's "Mariage" value
 * @method MariageActeur setId()                    Sets the current record's "id" value
 * @method MariageActeur setMariageId()             Sets the current record's "mariage_id" value
 * @method MariageActeur setNom()                   Sets the current record's "nom" value
 * @method MariageActeur setPrenom()                Sets the current record's "prenom" value
 * @method MariageActeur setSexe()                  Sets the current record's "sexe" value
 * @method MariageActeur setTypeacteur()            Sets the current record's "typeacteur" value
 * @method MariageActeur setDatenaissance()         Sets the current record's "datenaissance" value
 * @method MariageActeur setLieunaissance()         Sets the current record's "lieunaissance" value
 * @method MariageActeur setDomicile()              Sets the current record's "domicile" value
 * @method MariageActeur setResidence()             Sets the current record's "residence" value
 * @method MariageActeur setProfession()            Sets the current record's "profession" value
 * @method MariageActeur setEtatanterieurmariage()  Sets the current record's "etatanterieurmariage" value
 * @method MariageActeur setNomprenomprecconjoint() Sets the current record's "nomprenomprecconjoint" value
 * @method MariageActeur setNomapresmariage()       Sets the current record's "nomapresmariage" value
 * @method MariageActeur setMariage()               Sets the current record's "Mariage" value
 * 
 * @package    etatcivil
 * @subpackage model
 * @author     Boyer Jimmy
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMariageActeur extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mariage_acteur');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('mariage_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('nom', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('prenom', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('sexe', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'homme',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('typeacteur', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'conjoint1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('datenaissance', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('lieunaissance', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('domicile', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('residence', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('profession', 'string', 70, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 70,
             ));
        $this->hasColumn('etatanterieurmariage', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'cÃ©libataire',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('nomprenomprecconjoint', 'string', 90, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 90,
             ));
        $this->hasColumn('nomapresmariage', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 60,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Mariage', array(
             'local' => 'mariage_id',
             'foreign' => 'id'));
    }
}