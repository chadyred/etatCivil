<?php

/**
 * BaseMariage_contact
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $mariage_id
 * @property string $nom
 * @property string $prenom
 * @property enum $sexe
 * @property enum $typeContact
 * @property enum $enRelationA
 * @property enum $info
 * @property integer $age
 * @property string $domicile
 * @property string $profession
 * @property Mariage $Mariage
 * 
 * @method integer         getMariageId()   Returns the current record's "mariage_id" value
 * @method string          getNom()         Returns the current record's "nom" value
 * @method string          getPrenom()      Returns the current record's "prenom" value
 * @method enum            getSexe()        Returns the current record's "sexe" value
 * @method enum            getTypeContact() Returns the current record's "typeContact" value
 * @method enum            getEnRelationA() Returns the current record's "enRelationA" value
 * @method enum            getInfo()        Returns the current record's "info" value
 * @method integer         getAge()         Returns the current record's "age" value
 * @method string          getDomicile()    Returns the current record's "domicile" value
 * @method string          getProfession()  Returns the current record's "profession" value
 * @method Mariage         getMariage()     Returns the current record's "Mariage" value
 * @method Mariage_contact setMariageId()   Sets the current record's "mariage_id" value
 * @method Mariage_contact setNom()         Sets the current record's "nom" value
 * @method Mariage_contact setPrenom()      Sets the current record's "prenom" value
 * @method Mariage_contact setSexe()        Sets the current record's "sexe" value
 * @method Mariage_contact setTypeContact() Sets the current record's "typeContact" value
 * @method Mariage_contact setEnRelationA() Sets the current record's "enRelationA" value
 * @method Mariage_contact setInfo()        Sets the current record's "info" value
 * @method Mariage_contact setAge()         Sets the current record's "age" value
 * @method Mariage_contact setDomicile()    Sets the current record's "domicile" value
 * @method Mariage_contact setProfession()  Sets the current record's "profession" value
 * @method Mariage_contact setMariage()     Sets the current record's "Mariage" value
 * 
 * @package    etatcivil
 * @subpackage model
 * @author     Boyer Jimmy
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMariage_contact extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mariage_contact');
        $this->hasColumn('mariage_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('nom', 'string', 60, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 60,
             ));
        $this->hasColumn('prenom', 'string', 60, array(
             'type' => 'string',
             'notnull' => true,
             'charset' => 'utf8',
             'length' => 60,
             ));
        $this->hasColumn('sexe', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'masculin',
              1 => 'féminin',
             ),
             'default' => 'masculin',
             'notnull' => true,
             'charset' => 'utf8',
             ));
        $this->hasColumn('typeContact', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'témoin',
              1 => 'père',
              2 => 'mère',
             ),
             'default' => 'témoin',
             'notnull' => true,
             'charset' => 'utf8',
             ));
        $this->hasColumn('enRelationA', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'conjoint1',
              1 => 'conjoint2',
             ),
             'default' => 'époux',
             'notnull' => true,
             'charset' => 'utf8',
             ));
        $this->hasColumn('info', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => '',
              1 => 'décédé(e)',
             ),
             'default' => ', notnull: false',
             'charset' => 'UTF8',
             ));
        $this->hasColumn('age', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('domicile', 'string', 4000, array(
             'type' => 'string',
             'notnull' => false,
             'charset' => 'utf8',
             'length' => 4000,
             ));
        $this->hasColumn('profession', 'string', 70, array(
             'type' => 'string',
             'notnull' => false,
             'charset' => 'utf8',
             'length' => 70,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Mariage', array(
             'local' => 'mariage_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));
    }
}