<?php

/**
 * Mariage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    etatCivil
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Mariage extends BaseMariage
{
    //Cette méthode retourne le nombre d'acteur par mariage
    public function compteLesActeurs()
    {
        $res = Doctrine_Query::create()
            -> from('Mariage_Acteur act')
            ->where('act.mariage_id = ?', $this->getId());

        // On appel ici la méthode compteLesActeurs de la TABLE !
        return Doctrine_Core::getTable('Mariage')->compteLesActeurs($res);
    }
/*
    public function EpouxIsPresent() {
        
        $resEpoux = Doctrine::getTable('Mariage_acteur')
        ->createQuery('act')
                ->where('act.mariage_id = ?', $this->getId())
                ->andwhere('act.typeActeur= ?', "conjoint1")
                ->execute();

        if ($resEpoux->count() == 0)
            return 0;
         else
            return 1;
    }*/
/*
    public function EpouseIsPresent() {
        
        $resEpouse = Doctrine::getTable('Mariage_acteur')
        ->createQuery('act')
                ->where('act.mariage_id = ?', $this->getId())
                ->andwhere('act.typeActeur= ?', "conjoint2")
                ->execute();

        if ($resEpouse->count() == 0)
            return 0;
         else
            return 1;
    }*/
    
        public function Conjoint1IsPresent() {
        
        $resEpoux = Doctrine::getTable('Mariage_acteur')
        ->createQuery('act')
                ->where('act.mariage_id = ?', $this->getId())
                ->andwhere('act.typeActeur= ?', "conjoint1")
                ->execute();

        if ($resEpoux->count() == 0)
            return 0;
         else
            return 1;
    }
    
      public function Conjoint2IsPresent() {
        
        $resEpoux = Doctrine::getTable('Mariage_acteur')
        ->createQuery('act')
                ->where('act.mariage_id = ?', $this->getId())
                ->andwhere('act.typeActeur= ?', "conjoint2")
                ->execute();

        if ($resEpoux->count() == 0)
            return 0;
         else
            return 1;
    }

    //Cette méthode retourne le nombre de témoin par mariage
   /* public function compteLesTemoinsEpoux()
    {
        $res = Doctrine_Query::create()
            -> from('Mariage_Contact con')
            ->where('con.enrelationa = ?', "époux")
            ->andwhere('con.mariage_id = ?', $this->getId())
            ->andWhere('con.typecontact = ?', "témoin");

        // On appel ici la méthode compteLesTemoins de la TABLE !
        return Doctrine_Core::getTable('Mariage')->compteLesTemoins($res);
    }*/
    
    
        public function compteLesTemoinsConjoint1()
    {
        $res = Doctrine_Query::create()
            -> from('Mariage_Contact con')
            ->where('con.enrelationa = ?', "conjoint1")
            ->andwhere('con.mariage_id = ?', $this->getId())
            ->andWhere('con.typecontact = ?', "témoin");

        // On appel ici la méthode compteLesTemoins de la TABLE !
        return Doctrine_Core::getTable('Mariage')->compteLesTemoins($res);
    }

        //Cette méthode retourne le nombre de témoin par mariage
  /*  public function compteLesTemoinsEpouse()
    {
        $res = Doctrine_Query::create()
            -> from('Mariage_Contact con')
            ->where('con.enrelationa = ?', "épouse")
            ->andwhere('con.mariage_id = ?', $this->getId())
            ->andWhere('con.typecontact = ?', "témoin");

        // On appel ici la méthode compteLesTemoins de la TABLE !
        return Doctrine_Core::getTable('Mariage')->compteLesTemoins($res);
    }*/
    
            //Cette méthode retourne le nombre de témoin par mariage
    public function compteLesTemoinsConjoint2()
    {
        $res = Doctrine_Query::create()
            -> from('Mariage_Contact con')
            ->where('con.enrelationa = ?', "conjoint2")
            ->andwhere('con.mariage_id = ?', $this->getId())
            ->andWhere('con.typecontact = ?', "témoin");

        // On appel ici la méthode compteLesTemoins de la TABLE !
        return Doctrine_Core::getTable('Mariage')->compteLesTemoins($res);
    }

    /**
     * Cette méthode verifie la présence des parents de l'époux
     * Elle renvoi 1 s'ils sont tous les deux présent
     *              0 s'ils ne sont pas enregistrés
     *                -1 si il manque la mère
     *                  -2 si il manque le père
     *
     * @author boyer jimmy
     * @return type booléen -2 / -1 / 0 / 1
     */
    
   /*
    public function parentsEpouxPresent()
    {
        $resP = Doctrine::getTable('Mariage_contact')
        ->createQuery('con')
                ->where('con.enrelationa = ?', "époux")
                ->andWhere('con.typecontact = ?', "père")
                ->andWhere('con.mariage_id = ?', $this->getId())
                ->execute();

        $resM = Doctrine::getTable('Mariage_contact')
        ->createQuery('con')
                ->where('con.enrelationa = ?', "époux")
                ->andWhere('con.typecontact = ?', "mère")
                ->andWhere('con.mariage_id = ?', $this->getId())
                ->execute();

        if ($resP->count()==1 && $resM->count()==1)
        {
            return "Parents présents";
        }
        else if ($resP->count()==1 && $resM->count()==0)
        {
            return "Mère absente";
        } else if ($resP->count()==0 && $resM->count()==1)
        {
            return "Père absent";
        } else {
            return "Parents absents";
        }
    
    }
    */
       public function parentsConjoint1Present()
    {
        $resP = Doctrine::getTable('Mariage_contact')
        ->createQuery('con')
                ->where('con.enrelationa = ?', "conjoint1")
                ->andWhere('con.typecontact = ?', "père")
                ->andWhere('con.mariage_id = ?', $this->getId())
                ->execute();

        $resM = Doctrine::getTable('Mariage_contact')
        ->createQuery('con')
                ->where('con.enrelationa = ?', "conjoint1")
                ->andWhere('con.typecontact = ?', "mère")
                ->andWhere('con.mariage_id = ?', $this->getId())
                ->execute();

        if ($resP->count()==1 && $resM->count()==1)
        {
            return "Parents présents";
        }
        else if ($resP->count()==1 && $resM->count()==0)
        {
            return "Mère absente";
        } else if ($resP->count()==0 && $resM->count()==1)
        {
            return "Père absent";
        } else {
            return "Parents absents";
        }
    }

    /**
     * Cette méthode verifie la présence des parents de l'épouse
     * Elle renvoi 1 s'ils sont tous les deux présent
     *              0 s'ils ne sont pas enregistrés
     *                -1 si il manque la mère
     *                  -2 si il manque le père
     *
     * @author boyer jimmy
     * @return type booléen -2 / -1 / 0 / 1
   
       */
   /* 
    public function parentsEpousePresent()
    {
        $resP = Doctrine::getTable('Mariage_contact')
        ->createQuery('con')
                ->where('con.enrelationa = ?', "épouse")
                ->andWhere('con.typecontact = ?', "père")
                ->andWhere('con.mariage_id = ?', $this->getId())
                ->execute();

        $resM = Doctrine::getTable('Mariage_contact')
        ->createQuery('con')
                ->where('con.enrelationa = ?', "épouse")
                ->andWhere('con.typecontact = ?', "mère")
                ->andWhere('con.mariage_id = ?', $this->getId())
                ->execute();

        if ($resP->count()==1 && $resM->count()==1)
        {
            return "Parents présents";
        }
        else if ($resP->count()==1 && $resM->count()==0)
        {
            return "Mère absente";
        } else if ($resP->count()==0 && $resM->count()==1)
        {
            return "Père absent";
        } else {
            return "Parents absents";
        }
    }
    */
      public function parentsConjoint2Present()
    {
        $resP = Doctrine::getTable('Mariage_contact')
        ->createQuery('con')
                ->where('con.enrelationa = ?', "conjoint2")
                ->andWhere('con.typecontact = ?', "père")
                ->andWhere('con.mariage_id = ?', $this->getId())
                ->execute();

        $resM = Doctrine::getTable('Mariage_contact')
        ->createQuery('con')
                ->where('con.enrelationa = ?', "conjoint2")
                ->andWhere('con.typecontact = ?', "mère")
                ->andWhere('con.mariage_id = ?', $this->getId())
                ->execute();

        if ($resP->count()==1 && $resM->count()==1)
        {
            return "Parents présents";
        }
        else if ($resP->count()==1 && $resM->count()==0)
        {
            return "Mère absente";
        } else if ($resP->count()==0 && $resM->count()==1)
        {
            return "Père absent";
        } else {
            return "Parents absents";
        }
    }
    

    /*
     * Getter de la Table Mariage permettant de recuperer les
     * Acteur/contact en relation au bon acte
     */
  /*
    public function getEpoux()
    {
        $epouxC = Doctrine_Query::create()
            ->from('Mariage_acteur act')
                ->where("act.mariage_id = ?", $this->getId() )
                ->andWhere('act.typeacteur = ?', "époux")
                ->execute();

        $epoux = $epouxC->getFirst();

        return $epoux;
    }

    public function getEpouse()
    {
        $epouseC = Doctrine_Query::create()
            ->from('Mariage_acteur act')
                ->where("act.mariage_id = ?", $this->getId() )
                ->andWhere('act.typeacteur = ?', "épouse")
                ->execute();


        $epouse = $epouseC->getFirst();

        return $epouse;
    }*/
    
    
       public function getConjoint1()
    {
        $epouxC = Doctrine_Query::create()
            ->from('Mariage_acteur act')
                ->where("act.mariage_id = ?", $this->getId() )
                ->andWhere('act.typeacteur = ?', "conjoint1")
                ->execute();

        $epoux = $epouxC->getFirst();

        return $epoux;
    }

    public function getConjoint2()
    {
        $epouseC = Doctrine_Query::create()
            ->from('Mariage_acteur act')
                ->where("act.mariage_id = ?", $this->getId() )
                ->andWhere('act.typeacteur = ?', "conjoint2")
                ->execute();


        $epouse = $epouseC->getFirst();

        return $epouse;
    }
    
    
/*
    public function getTemoinsEpoux()
    {
        $TemoinsEpoux = Doctrine_Query::create()
            ->from('Mariage_contact con')
                ->where("con.mariage_id = ?", $this->getId() )
                ->andWhere('con.enrelationa = ?', "époux")
                ->andWhere('con.typeContact = ?', "témoin")
                ->execute();

        return $TemoinsEpoux;
    }

    
    public function getTemoinsEpouse()
    {
        $TemoinsEpouse = Doctrine_Query::create()
            ->from('Mariage_contact con')
                ->where("con.mariage_id = ?", $this->getId() )
                ->andWhere('con.enrelationa = ?', "épouse")
                ->andWhere('con.typeContact = ?', "témoin")
                ->execute();

        return $TemoinsEpouse;
    }
    */
    public function getTemoinsConjoint1()
    {
        $Temoins = Doctrine_Query::create()
            ->from('Mariage_contact con')
                ->where("con.mariage_id = ?", $this->getId() )
                ->andWhere('con.enrelationa = ?', "conjoint1")
                ->andWhere('con.typeContact = ?', "témoin")
                ->execute();

        return $Temoins;
    }

    
        
    public function getTemoinsConjoint2()
    {
        $Temoins = Doctrine_Query::create()
            ->from('Mariage_contact con')
                ->where("con.mariage_id = ?", $this->getId() )
                ->andWhere('con.enrelationa = ?', "conjoint2")
                ->andWhere('con.typeContact = ?', "témoin")
                ->execute();

        return $Temoins;
    }


}
